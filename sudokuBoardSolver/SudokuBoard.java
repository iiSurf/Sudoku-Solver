// Nicholas Humeniuk Sandberg
// Sudoku Board
//
// This program creates a 9 x 9 sudoku board playing space that reads from a file and checks to
// see if the rules of sudoku are followed.

import java.io.File;
import java.util.Scanner;
import java.io.FileNotFoundException;

public class SudokuBoard {

   char[][] board = new char[9][9];
   
   
   public SudokuBoard(String fileName) {
      try {
      
         Scanner input = new Scanner(new File(fileName));
         
         for (int row  = 0; row < 9; row++) {
            String inputLine = input.nextLine();
            
            for (int col = 0; col < 9; col++) {
               board[row][col] = inputLine.charAt(col); 
            }
         }
      }
      catch (Exception error) {
         System.out.println("File not found");
         }
   }
   
   public String toString(){
      
      String s = "";
      
      for (int row  = 0; row < 9; row++) {
         
         s += "\n";
         
         for (int col = 0; col < 9; col++) {
            s += board[row][col];
         }
      }
      return s;
   }
   
   public boolean isValid() {
   
      return isValidData() && isValidRow() && isValidColumn() && isValidMiniSquare(); 
   }
   
   public boolean isSolved() {
      if(isValid()) {
         for(int row = 0; row < 9; row++) {
            for(int col = 0; col < 9; col++) {
               if(!(board[row][col] > '0' && board[row][col] <= '9')) {
                  return false;
               }
            }
         }
         return true;
      }
      else{
      return false;
      }
   }
   
   private boolean isValidData() {
      for(int row = 0; row < 9; row++) {
         for(int col = 0; col < 9; col++) {
            if(!(board[row][col] > '0' && board[row][col] <= '9') && (!(board[row][col] == '.'))) {
               return false;
            }
         }
      }
      return true;
   }
   
   private boolean isValidRow() {
      int counter = 0;
      for(int numTested = 1; numTested < 10; numTested++) {
        
         for(int row = 0; row < 9; row++) {
            counter = 0;
            for(int col = 0; col < 9; col++) {
               System.out.println(board[row][col]);
               System.out.println(numTested);
               if (board[row][col] == (Character.forDigit(numTested, 10))) {
                  counter++;
               }
               if (counter > 1) {
                  return false;
               } 
            }
         }
      }
      return true;
   }
   
   private boolean isValidColumn() {
      int counter = 0;
      for(int numTested = 1; numTested < 10; numTested++) {
        
         for(int col = 0; col < 9; col++) {
            counter = 0;
            for(int row = 0; row < 9; row++) {
               System.out.println(board[row][col]);
               System.out.println(numTested);
               if (board[row][col] == (Character.forDigit(numTested, 10))) {
                  counter++;
               }
               if (counter > 1) {
                  return false;
               } 
            }
         }
      }
      return true;
   }
   
   private boolean isValidMiniSquare() {
      for(int spot = 1; spot < 10; spot++) {
         char[][] mini = miniSquare(spot);

         for(int numTested = 1; numTested < 10; numTested++) {
            int counter =0;
            for(int row = 0; row < 3; row++) {
               for(int col = 0; col < 3; col++) {
                  System.out.println(board[row][col]);
                  System.out.println(numTested);
                  if (board[row][col] == (Character.forDigit(numTested, 10))) {
                     counter++;
                  }
                  if (counter > 1) {
                     return false;
                  } 
               }
            }
         }
      }
      return true;
    }
   
   private char[][] miniSquare(int spot) {
      char[][] mini = new char[3][3];
      for(int r = 0; r < 3; r++) {
         for(int c = 0; c < 3; c++) {
             // whoa - wild! This took me a solid hour to figure out (at least)
             // This translates between the "spot" in the 9x9 Sudoku board
             // and a new mini square of 3x3
            mini[r][c] = board[(spot - 1) / 3 * 3 + r][(spot - 1) % 3 * 3 + c];
         }
      }
      return mini;
   }
}

/* Output Below:

 3
 6
 5
 6
 4
 6
 7
 6
 8
 6
 2
 6
 6
 6
 1
 6
 1
 6
 4
 6
 6
 6
 2
 6
 9
 6
 5
 6
 8
 6
 3
 6
 7
 6
 2
 6
 8
 6
 7
 6
 3
 6
 1
 6
 6
 6
 4
 6
 5
 6
 9
 6
 5
 7
 6
 7
 1
 7
 8
 7
 4
 7
 7
 7
 9
 7
 2
 7
 3
 7
 3
 7
 7
 7
 9
 7
 5
 7
 2
 7
 1
 7
 6
 7
 8
 7
 4
 7
 4
 7
 2
 7
 8
 7
 9
 7
 6
 7
 3
 7
 1
 7
 7
 7
 5
 7
 6
 7
 1
 7
 3
 7
 7
 7
 8
 7
 9
 7
 5
 7
 4
 7
 2
 7
 7
 7
 9
 7
 4
 7
 6
 7
 5
 7
 2
 7
 3
 7
 1
 7
 8
 7
 8
 7
 5
 7
 2
 7
 1
 7
 3
 7
 4
 7
 7
 7
 9
 7
 6
 7
 9
 7
 3
 7
 5
 7
 4
 7
 7
 7
 8
 7
 2
 7
 6
 7
 1
 7
 1
 7
 4
 7
 6
 7
 2
 7
 9
 7
 5
 7
 8
 7
 3
 7
 7
 7
 2
 7
 8
 7
 7
 7
 3
 7
 1
 7
 6
 7
 4
 7
 5
 7
 9
 7
 5
 8
 6
 8
 1
 8
 8
 8
 4
 8
 7
 8
 9
 8
 2
 8
 3
 8
 3
 8
 7
 8
 9
 8
 5
 8
 2
 8
 1
 8
 6
 8
 8
 8
 4
 8
 4
 8
 2
 8
 8
 8
 9
 8
 6
 8
 3
 8
 1
 8
 7
 8
 5
 8
 6
 8
 1
 8
 3
 8
 7
 8
 8
 8
 9
 8
 5
 8
 4
 8
 2
 8
 7
 8
 9
 8
 4
 8
 6
 8
 5
 8
 2
 8
 3
 8
 1
 8
 8
 8
 8
 8
 5
 8
 2
 8
 1
 8
 3
 8
 4
 8
 7
 8
 9
 8
 6
 8
 9
 8
 3
 8
 5
 8
 4
 8
 7
 8
 8
 8
 2
 8
 6
 8
 1
 8
 1
 8
 4
 8
 6
 8
 2
 8
 9
 8
 5
 8
 8
 8
 3
 8
 7
 8
 2
 8
 8
 8
 7
 8
 3
 8
 1
 8
 6
 8
 4
 8
 5
 8
 9
 8
 5
 9
 6
 9
 1
 9
 8
 9
 4
 9
 7
 9
 9
 9
 2
 9
 3
 9
 3
 9
 7
 9
 9
 9
 5
 9
 2
 9
 1
 9
 6
 9
 8
 9
 4
 9
 4
 9
 2
 9
 8
 9
 9
 9
 6
 9
 3
 9
 1
 9
 7
 9
 5
 9
 6
 9
 1
 9
 3
 9
 7
 9
 8
 9
 9
 9
 5
 9
 4
 9
 2
 9
 7
 9
 9
 9
 4
 9
 6
 9
 5
 9
 2
 9
 3
 9
 1
 9
 8
 9
 8
 9
 5
 9
 2
 9
 1
 9
 3
 9
 4
 9
 7
 9
 9
 9
 6
 9
 9
 9
 3
 9
 5
 9
 4
 9
 7
 9
 8
 9
 2
 9
 6
 9
 1
 9
 1
 9
 4
 9
 6
 9
 2
 9
 9
 9
 5
 9
 8
 9
 3
 9
 7
 9
 2
 9
 8
 9
 7
 9
 3
 9
 1
 9
 6
 9
 4
 9
 5
 9
 9
 9
 5
 1
 3
 1
 4
 1
 6
 1
 7
 1
 2
 1
 1
 1
 9
 1
 8
 1
 5
 2
 3
 2
 4
 2
 6
 2
 7
 2
 2
 2
 1
 2
 9
 2
 8
 2
 5
 3
 3
 3
 4
 3
 6
 3
 7
 3
 2
 3
 1
 3
 9
 3
 8
 3
 5
 4
 3
 4
 4
 4
 6
 4
 7
 4
 2
 4
 1
 4
 9
 4
 8
 4
 5
 5
 3
 5
 4
 5
 6
 5
 7
 5
 2
 5
 1
 5
 9
 5
 8
 5
 5
 6
 3
 6
 4
 6
 6
 6
 7
 6
 2
 6
 1
 6
 9
 6
 8
 6
 5
 7
 3
 7
 4
 7
 6
 7
 7
 7
 2
 7
 1
 7
 9
 7
 8
 7
 5
 8
 3
 8
 4
 8
 6
 8
 7
 8
 2
 8
 1
 8
 9
 8
 8
 8
 5
 9
 3
 9
 4
 9
 6
 9
 7
 9
 2
 9
 1
 9
 9
 9
 8
 9
 5
 1
 3
 1
 4
 1
 6
 1
 7
 1
 2
 1
 1
 1
 9
 1
 8
 1
 5
 2
 3
 2
 4
 2
 6
 2
 7
 2
 2
 2
 1
 2
 9
 2
 8
 2
 5
 3
 3
 3
 4
 3
 6
 3
 7
 3
 2
 3
 1
 3
 9
 3
 8
 3
 5
 4
 3
 4
 4
 4
 6
 4
 7
 4
 2
 4
 1
 4
 9
 4
 8
 4
 5
 5
 3
 5
 4
 5
 6
 5
 7
 5
 2
 5
 1
 5
 9
 5
 8
 5
 5
 6
 3
 6
 4
 6
 6
 6
 7
 6
 2
 6
 1
 6
 9
 6
 8
 6
 5
 7
 3
 7
 4
 7
 6
 7
 7
 7
 2
 7
 1
 7
 9
 7
 8
 7
 5
 8
 3
 8
 4
 8
 6
 8
 7
 8
 2
 8
 1
 8
 9
 8
 8
 8
 5
 9
 3
 9
 4
 9
 6
 9
 7
 9
 2
 9
 1
 9
 9
 9
 8
 9
 5
 1
 3
 1
 4
 1
 6
 1
 7
 1
 2
 1
 1
 1
 9
 1
 8
 1
 5
 2
 3
 2
 4
 2
 6
 2
 7
 2
 2
 2
 1
 2
 9
 2
 8
 2
 5
 3
 3
 3
 4
 3
 6
 3
 7
 3
 2
 3
 1
 3
 9
 3
 8
 3
 5
 4
 3
 4
 4
 4
 6
 4
 7
 4
 2
 4
 1
 4
 9
 4
 8
 4
 5
 5
 3
 5
 4
 5
 6
 5
 7
 5
 2
 5
 1
 5
 9
 5
 8
 5
 5
 6
 3
 6
 4
 6
 6
 6
 7
 6
 2
 6
 1
 6
 9
 6
 8
 6
 5
 7
 3
 7
 4
 7
 6
 7
 7
 7
 2
 7
 1
 7
 9
 7
 8
 7
 5
 8
 3
 8
 4
 8
 6
 8
 7
 8
 2
 8
 1
 8
 9
 8
 8
 8
 5
 9
 3
 9
 4
 9
 6
 9
 7
 9
 2
 9
 1
 9
 9
 9
 8
 9
 5
 1
 3
 1
 4
 1
 6
 1
 7
 1
 2
 1
 1
 1
 9
 1
 8
 1
 5
 2
 3
 2
 4
 2
 6
 2
 7
 2
 2
 2
 1
 2
 9
 2
 8
 2
 5
 3
 3
 3
 4
 3
 6
 3
 7
 3
 2
 3
 1
 3
 9
 3
 8
 3
 5
 4
 3
 4
 4
 4
 6
 4
 7
 4
 2
 4
 1
 4
 9
 4
 8
 4
 5
 5
 3
 5
 4
 5
 6
 5
 7
 5
 2
 5
 1
 5
 9
 5
 8
 5
 5
 6
 3
 6
 4
 6
 6
 6
 7
 6
 2
 6
 1
 6
 9
 6
 8
 6
 5
 7
 3
 7
 4
 7
 6
 7
 7
 7
 2
 7
 1
 7
 9
 7
 8
 7
 5
 8
 3
 8
 4
 8
 6
 8
 7
 8
 2
 8
 1
 8
 9
 8
 8
 8
 5
 9
 3
 9
 4
 9
 6
 9
 7
 9
 2
 9
 1
 9
 9
 9
 8
 9
 5
 1
 3
 1
 4
 1
 6
 1
 7
 1
 2
 1
 1
 1
 9
 1
 8
 1
 5
 2
 3
 2
 4
 2
 6
 2
 7
 2
 2
 2
 1
 2
 9
 2
 8
 2
 5
 3
 3
 3
 4
 3
 6
 3
 7
 3
 2
 3
 1
 3
 9
 3
 8
 3
 5
 4
 3
 4
 4
 4
 6
 4
 7
 4
 2
 4
 1
 4
 9
 4
 8
 4
 5
 5
 3
 5
 4
 5
 6
 5
 7
 5
 2
 5
 1
 5
 9
 5
 8
 5
 5
 6
 3
 6
 4
 6
 6
 6
 7
 6
 2
 6
 1
 6
 9
 6
 8
 6
 5
 7
 3
 7
 4
 7
 6
 7
 7
 7
 2
 7
 1
 7
 9
 7
 8
 7
 5
 8
 3
 8
 4
 8
 6
 8
 7
 8
 2
 8
 1
 8
 9
 8
 8
 8
 5
 9
 3
 9
 4
 9
 6
 9
 7
 9
 2
 9
 1
 9
 9
 9
 8
 9
 5
 1
 3
 1
 4
 1
 6
 1
 7
 1
 2
 1
 1
 1
 9
 1
 8
 1
 5
 2
 3
 2
 4
 2
 6
 2
 7
 2
 2
 2
 1
 2
 9
 2
 8
 2
 5
 3
 3
 3
 4
 3
 6
 3
 7
 3
 2
 3
 1
 3
 9
 3
 8
 3
 5
 4
 3
 4
 4
 4
 6
 4
 7
 4
 2
 4
 1
 4
 9
 4
 8
 4
 5
 5
 3
 5
 4
 5
 6
 5
 7
 5
 2
 5
 1
 5
 9
 5
 8
 5
 5
 6
 3
 6
 4
 6
 6
 6
 7
 6
 2
 6
 1
 6
 9
 6
 8
 6
 5
 7
 3
 7
 4
 7
 6
 7
 7
 7
 2
 7
 1
 7
 9
 7
 8
 7
 5
 8
 3
 8
 4
 8
 6
 8
 7
 8
 2
 8
 1
 8
 9
 8
 8
 8
 5
 9
 3
 9
 4
 9
 6
 9
 7
 9
 2
 9
 1
 9
 9
 9
 8
 9
 5
 1
 3
 1
 4
 1
 6
 1
 7
 1
 2
 1
 1
 1
 9
 1
 8
 1
 5
 2
 3
 2
 4
 2
 6
 2
 7
 2
 2
 2
 1
 2
 9
 2
 8
 2
 5
 3
 3
 3
 4
 3
 6
 3
 7
 3
 2
 3
 1
 3
 9
 3
 8
 3
 5
 4
 3
 4
 4
 4
 6
 4
 7
 4
 2
 4
 1
 4
 9
 4
 8
 4
 5
 5
 3
 5
 4
 5
 6
 5
 7
 5
 2
 5
 1
 5
 9
 5
 8
 5
 5
 6
 3
 6
 4
 6
 6
 6
 7
 6
 2
 6
 1
 6
 9
 6
 8
 6
 5
 7
 3
 7
 4
 7
 6
 7
 7
 7
 2
 7
 1
 7
 9
 7
 8
 7
 5
 8
 3
 8
 4
 8
 6
 8
 7
 8
 2
 8
 1
 8
 9
 8
 8
 8
 5
 9
 3
 9
 4
 9
 6
 9
 7
 9
 2
 9
 1
 9
 9
 9
 8
 9
 5
 1
 3
 1
 4
 1
 6
 1
 7
 1
 2
 1
 1
 1
 9
 1
 8
 1
 5
 2
 3
 2
 4
 2
 6
 2
 7
 2
 2
 2
 1
 2
 9
 2
 8
 2
 5
 3
 3
 3
 4
 3
 6
 3
 7
 3
 2
 3
 1
 3
 9
 3
 8
 3
 5
 4
 3
 4
 4
 4
 6
 4
 7
 4
 2
 4
 1
 4
 9
 4
 8
 4
 5
 5
 3
 5
 4
 5
 6
 5
 7
 5
 2
 5
 1
 5
 9
 5
 8
 5
 5
 6
 3
 6
 4
 6
 6
 6
 7
 6
 2
 6
 1
 6
 9
 6
 8
 6
 5
 7
 3
 7
 4
 7
 6
 7
 7
 7
 2
 7
 1
 7
 9
 7
 8
 7
 5
 8
 3
 8
 4
 8
 6
 8
 7
 8
 2
 8
 1
 8
 9
 8
 8
 8
 5
 9
 3
 9
 4
 9
 6
 9
 7
 9
 2
 9
 1
 9
 9
 9
 8
 9
 5
 1
 3
 1
 4
 1
 6
 1
 7
 1
 2
 1
 1
 1
 9
 1
 8
 1
 5
 2
 3
 2
 4
 2
 6
 2
 7
 2
 2
 2
 1
 2
 9
 2
 8
 2
 5
 3
 3
 3
 4
 3
 6
 3
 7
 3
 2
 3
 1
 3
 9
 3
 8
 3
 5
 4
 3
 4
 4
 4
 6
 4
 7
 4
 2
 4
 1
 4
 9
 4
 8
 4
 5
 5
 3
 5
 4
 5
 6
 5
 7
 5
 2
 5
 1
 5
 9
 5
 8
 5
 5
 6
 3
 6
 4
 6
 6
 6
 7
 6
 2
 6
 1
 6
 9
 6
 8
 6
 5
 7
 3
 7
 4
 7
 6
 7
 7
 7
 2
 7
 1
 7
 9
 7
 8
 7
 5
 8
 3
 8
 4
 8
 6
 8
 7
 8
 2
 8
 1
 8
 9
 8
 8
 8
 5
 9
 3
 9
 4
 9
 6
 9
 7
 9
 2
 9
 1
 9
 9
 9
 8
 9
 true
*/